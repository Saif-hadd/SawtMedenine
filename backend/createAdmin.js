/**
 * Script de cr√©ation d'un administrateur initial - VERSION CORRIG√âE
 * Utilise la m√©thode createAdmin pour hash automatique
 */

const mongoose = require('mongoose');
require('dotenv').config();
const Admin = require('./models/Admin'); // Ajustez le chemin si n√©cessaire

const createInitialAdmin = async () => {
  try {
    console.log('üîß Cr√©ation de l\'administrateur initial...');

    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await Admin.findOne({ email: 'admin@medenine4100.tn' });

    if (existingAdmin) {
      console.log('‚ö†Ô∏è Admin existant trouv√©. Suppression...');
      await Admin.deleteOne({ _id: existingAdmin._id });
      console.log('‚úÖ Admin existant supprim√©');
    }

    // Cr√©er le nouvel admin - le mot de passe sera hash√© automatiquement par le middleware
    const adminData = {
      email: 'admin@medenine4100.tn',
      password: 'Admin4100Medenine@', // mot de passe clair
      firstName: 'Admin',
      lastName: 'Med'
    };

    const admin = await Admin.createAdmin(adminData);

    console.log('‚úÖ Nouvel administrateur cr√©√© avec succ√®s !');
    console.log('üìß Email:', admin.email);
    console.log('üîë Mot de passe:', adminData.password);
    console.log('‚ö†Ô∏è  Changez ce mot de passe apr√®s la premi√®re connexion !');

    // Test de connexion pour v√©rifier que tout fonctionne
    console.log('\nüß™ Test de connexion...');
    const authResult = await Admin.authenticate(adminData.email, adminData.password);
    
    if (authResult.success) {
      console.log('‚úÖ Test de connexion r√©ussi !');
    } else {
      console.log('‚ùå Test de connexion √©chou√©:', authResult.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'admin:', error.message);
  }
};

const main = async () => {
  try {
    console.log('üîó Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/medenine');
    console.log('‚úÖ Connect√© √† MongoDB');

    await createInitialAdmin();

    await mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
};

// Lancer le script
if (require.main === module) {
  main();
}

module.exports = { createInitialAdmin };